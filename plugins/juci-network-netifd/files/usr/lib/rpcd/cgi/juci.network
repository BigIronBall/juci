#!/bin/sh

. /usr/share/libubox/jshn.sh

network_adapters(){
	# moved to lua. result: went from taking 0.71 sec to 0.49 sec with more details
	/usr/lib/rpcd/cgi/juci.network.lua adapters
}

network_clients(){
	# we have moved this one to lua implementation
	/usr/lib/rpcd/cgi/juci.network.lua clients
}


network_load(){
	json_init 
	json_add_int "active_connections" $(cat /proc/sys/net/netfilter/nf_conntrack_count)
	json_add_int "max_connections" $(cat /proc/sys/net/netfilter/nf_conntrack_max)
	json_dump
}

network_nat_table(){
	ESTABLISHED=$(awk '
		/ESTABLISHED/ { 
			printf "proto=\"" $1 "\";"; 
			printf "state=\"" $4 "\";";
			printf "remote_ip=\"" substr($5, index($5, "=")+1) "\";";
			printf "local_ip=\"" substr($6, index($6, "=")+1) "\";";
			printf "remote_port=\"" substr($7, index($7, "=")+1) "\";";
			printf "local_port=\"" substr($8, index($8, "=")+1) "\";\n";
		}' /proc/net/ip_conntrack); 
		
	IFS=$'\n'; 
	json_init
	json_add_array "table"
	for FIELDS in $ESTABLISHED; do
		eval $FIELDS; 
		json_add_object ""; 
		json_add_string "proto" $proto; 
		json_add_string "state" $state; 
		json_add_string "local_ip" $local_ip; 
		json_add_string "remote_ip" $remote_ip; 
		json_add_int "local_port" $local_port;
		json_add_int "remote_port" $remote_port; 
		json_close_object; 
	done
	json_close_array
	json_dump
}

network_bridges() {
	$(brctl show | awk -F'\t' '{ # broadcom is stupid (why not write cli utitlities so they are cli friendly?)
		if(FNR==1) continue; 
		if($1 != "") { 
			if(BRNAME != "") { 
				print BRNAME "=" INTERFACES; 
			} 
			BRNAME=$1; 
			INTERFACES=$6; 
		} else { 
			INTERFACES=INTERFACES "," $8; 
		}
	} 
	END { 
		print BRNAME "=" INTERFACES; 
	}'); 
}

network_nameservers(){
	json_init 
	json_add_array "nameservers"; 
	for ns in `awk '/nameserver/{print $2}' /var/resolv.conf.auto`; do
		json_add_string "" $ns; 
	done
	json_close_array
	json_dump
}

case $1 in 
	.methods) 
		echo "clients,load,adapters,nameservers,nat_table"; 
		exit 0
		;;
	clients) 
		network_clients
		;;
	load)
		network_load
		;;
	nat_table)
		network_nat_table
		;;
	adapters)
		network_adapters
		;;
	nameservers)
		network_nameservers
		;;
esac
