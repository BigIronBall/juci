#!/bin/sh

. /usr/share/libubox/jshn.sh

network_adapters(){
	ADAPTERS=$(ip link | awk '
	/^[[:digit:]]/ { # interface line 
		name=substr($2, 0, length($2)-1); 
		if(name ~ /@/) name=substr(name, 0, index(name, "@") - 1); # remove the @ symbol that is sometimes added to device name
		printf "name=" name "\t"; 
		printf "flags=" substr($3, 2, length($3)-2) "\t"; 
		for(c = 4; c<=NF; c+=2){
			printf $c "=" $(c+1) "\t";
		}
	}
	/^[^[:digit:]]/ { # following lines
		for(c = 1; c <= NF; c+=2){
			if($c ~ /^link/){
				printf "link_type=" substr($c, index($c, "\/")+1, length($c)) "\t"; 
				printf "macaddr=" $(c+1) "\t"; 
			} else {
				printf $c "=" $(c+1) "\t";
			} 
		}
		printf "\n"; 
	}'); 
	
	json_init
	json_add_array "adapters"
	IFS=$'\n'; 
	for line in $ADAPTERS; do
		IFS=$'\t'; 
		json_add_object
		for field in $line; do
			name="${field%=*}"; 
			value="${field#*=}"; 
			json_add_string "$name" "$value";
		done
		json_close_object
		IFS=$'\n'; 
	done
	json_close_array
	json_dump
}

network_clients(){
	CLIENTS=$(awk '
	/[[:digit:]]/ { 
		printf "ipaddr=" $1 "\t"; #ipaddr
		printf "macaddr=" $4 "\t"; #macaddr
		printf "mask=" $5 "\t"; #mask
		printf "leasetime=" "\t"; # leasetime (none)
		printf "hostname=" "\t"; # hostname (none)
		printf "device=" $6 "\n"; #device
	}' /proc/net/arp); 
	
	json_init
	json_add_array "clients"
	IFS=$'\n'; 
	for line in $CLIENTS; do
		IFS=$'\t'; 
		IPADDR="none"
		json_add_object
		for field in $line; do
			name="${field%=*}"; 
			value="${field#*=}"; 
			if [ "$name" == "ipaddr" ]; then IPADDR="$value"; fi
			json_add_string "$name" "$value";
		done
		DHCPINFO=$(awk '$3 == "$IPADDR" { print }' /var/dhcp.leases | head -n1 | awk '
		{
			printf "leasetime=" $1 "\t"; # leasetime
			printf "hostname=" $4 "\n"; #hostname
		}'); 
		if [ "$DHCPINFO" != "" ]; then json_add_boolean "dhcp" "true"; fi
		for field in $DHCPINFO; do
			name="${field%=*}"; 
			value="${field#*=}"; 
			json_add_string "$name" "$value";
		done
		json_close_object
		IFS=$'\n'; 
	done
	json_close_array
	json_dump
}

network_client_alive(){
	local iface=$(awk '$1 == ipaddr { print $6 }' ipaddr=$1);
	json_init 
	arping $mac -q -f -c 1 -I $iface;
	if [ $? -ne 0 ]; then 
		json_add_boolean "alive" "false";
	else 
		json_add_string "alive" "true"; 
	fi
	json_dump
}

network_load(){
	json_init 
	json_add_int "active_connections" $(cat /proc/sys/net/netfilter/nf_conntrack_count)
	json_add_int "max_connections" $(cat /proc/sys/net/netfilter/nf_conntrack_max)
	json_dump
}

network_nat_table(){
	ESTABLISHED=$(awk '
		/ESTABLISHED/ { 
			printf "proto=\"" $1 "\";"; 
			printf "state=\"" $4 "\";";
			printf "local_ip=\"" substr($5, index($5, "=")+1) "\";";
			printf "remote_ip=\"" substr($6, index($6, "=")+1) "\";";
			printf "local_port=\"" substr($7, index($7, "=")+1) "\";";
			printf "remote_port=\"" substr($8, index($8, "=")+1) "\";\n";
		}' /proc/net/ip_conntrack); 
		
	IFS=$'\n'; 
	json_init
	json_add_array "table"
	for FIELDS in $ESTABLISHED; do
		eval $FIELDS; 
		json_add_object ""; 
		json_add_string "proto" $proto; 
		json_add_string "state" $state; 
		json_add_string "local_ip" $local_ip; 
		json_add_string "remote_ip" $remote_ip; 
		json_add_int "local_port" $local_port;
		json_add_int "remote_port" $remote_port; 
		json_close_object; 
	done
	json_close_array
	json_dump
}

network_bridges() {
	$(brctl show | awk -F'\t' '{ # broadcom is stupid (why not write cli utitlities so they are cli friendly?)
		if(FNR==1) continue; 
		if($1 != "") { 
			if(BRNAME != "") { 
				print BRNAME "=" INTERFACES; 
			} 
			BRNAME=$1; 
			INTERFACES=$6; 
		} else { 
			INTERFACES=INTERFACES "," $8; 
		}
	} 
	END { 
		print BRNAME "=" INTERFACES; 
	}'); 
}

network_nameservers(){
	json_init 
	json_add_array "nameservers"; 
	for ns in `awk '/nameserver/{print $2}' /var/resolv.conf.auto`; do
		json_add_string "" $ns; 
	done
	json_close_array
	json_dump
}

case $1 in 
	.methods) 
		echo "clients,load,adapters,nameservers,nat_table"; 
		exit 0
		;;
	clients) 
		network_clients
		;;
	load)
		network_load
		;;
	nat_table)
		network_nat_table
		;;
	adapters)
		network_adapters
		;;
	nameservers)
		network_nameservers
		;;
esac
